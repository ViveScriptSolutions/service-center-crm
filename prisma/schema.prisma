// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  ITEM_RECEIVED // "Item Received"
  IN_QUEUE // "In Queue"
  UNDER_REPAIR // "Under Repair"
  AWAITING_PARTS // "Awaiting Parts"
  READY_FOR_PICKUP // "Ready for Pickup"
  PICKED_UP // "Picked Up"
  CANCELLED // "Cancelled"
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(USER)
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]

  assignedJobs  Job[] @relation("AssignedJobs")
  diagnosedJobs Job[] @relation("DiagnosedJobs")
  deliveredJobs Job[] @relation("DeliveredJobs")
  createdJobs   Job[] @relation("CreatedJobs") // User who created the job entry


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs      Job[]
}

model Job {
  id                          Int         @id @default(autoincrement())
  receiptNo                   String      @unique // e.g., JOB-YYYYMMDD-XXXX
  title                       String
  status                      JobStatus   @default(ITEM_RECEIVED)
  notes                       String?

  customerId                  Int
  customer                    Customer    @relation(fields: [customerId], references: [id])

  assignedToId                Int?
  assignedTo                  User?       @relation("AssignedJobs", fields: [assignedToId], references: [id]) // Technician

  checkInDate                 DateTime    @default(now())
  printerBrand                String?
  printerModel                String?
  printerSerial               String?
  accessoriesReceived         String?
  imageUrl1                   String?
  imageUrl2                   String?
  imageUrl3                   String?
  initialObservations         String?
  problemsReported            String
  possibleCauses              String?
  physicalDamageFound         Boolean     @default(false)
  physicalDamageDescription   String?
  partsLikelyNeeded           String?

  diagnosisNotes              String?
  diagnosedById               Int?
  diagnosedBy                 User?       @relation("DiagnosedJobs", fields: [diagnosedById], references: [id])
  expectedDeliveryDate        DateTime?

  repairSummary               String?
  workDone                    String?
  partsReplaced               Json?
  partsCost                   Decimal?    @db.Decimal(10, 2)
  laborCost                   Decimal?    @db.Decimal(10, 2)
  otherCharges                Decimal?    @db.Decimal(10, 2)
  totalCharge                 Decimal?    @db.Decimal(10, 2)
  paymentStatus               PaymentStatus @default(PENDING)
  customerNotifiedDate        DateTime?
  paymentMethod               String?
  pickupDate                  DateTime?
  customerPickedUp            Boolean     @default(false)
  deliveryTimestamp           DateTime?
  deliveredById               Int?
  deliveredBy                 User?       @relation("DeliveredJobs", fields: [deliveredById], references: [id])

  createdById                 Int?
  createdBy                   User?       @relation("CreatedJobs", fields: [createdById], references: [id])

  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
